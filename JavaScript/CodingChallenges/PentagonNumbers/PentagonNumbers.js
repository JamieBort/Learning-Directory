// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

// Create my function that does everything.
function myFunction(n) {
    // 1. Pupulate an array that consists of pentagonal numbers.
    var myPnArray = [];
    // PnArray(n);
    function PnArray(n) {
        for (i = 1; i < n + 1; i++) {
            var P = i * (3 * i - 1) / 2;
            myPnArray.push(P);
        }
        console.log("P" + n + " is: ", myPnArray[n - 1]);
        console.log("The complete array is: ", myPnArray);
    }
    PnArray(n);

    // 2. Create an array of objects that consists of  the following:
    //      The first pentagonal number.
    //      The second pentagonal number.
    //      The sum of the first and second pentagonal numbers.
    //      The difference between the first and second pentagonal numbers.

    // The array created to contain the objects that I am generating below.
    var myArray = [
        // {
            // firstNumber: myPnArray[0]
        //     // firstNumber: 100,
        //     secondNumber: myPnArray[0]
        // }
    ];
    // console.log("My array of objects: ", myArray);

    for (var i = 0; i < n; i++) {
        for (var j = 0; j < n; j++) {
            // We want the program to see that '{ firstNumber: 1, secondNumber: 1 }' is already in the array. 
            // And consequently to skip pushing those pairs of numbers into the array. 
            // Hence the 'if' statement.

            // if (myPnArray[0] === myArray[i].firstNumber && myPnArray[0] === myArray[j].secondNumber) {
            //     console.log("When i is " + i + " and j is " + j + " the object already contains the numbers " + myPnArray[0] + " and " + myPnArray[0] + ": ", myArray[i], "So don't push them into myArray.");
            //     j++;
            // }

            // if (true) {
            // if (i > 0) { // Which one to use? "i > 0" or "j > 0"?
            // if (j > 0) { // Which one to use? "i > 0" or "j > 0"?
                // console.log("i is: " + i + " and j is :" + j + ". myArray[" + i + "] is ", myArray[i]);
                // if (myArray[0] === "{ firstNumber: 1, secondNumber: 1 }") {
                    // if (myArray[0].firstNumber === 1 && myArray[0].secondNumber === 1) {
                        // if (myArray[0].secondNumber === 1) {
                    // if(true){
                    // console.log("I have isolated ", myArray[0].firstNumber);
                    // console.log("I have isolated ", myArray[0]);
                    // j++;
                // }
            // }
            myArray.push({
                firstNumber: myPnArray[i],
                secondNumber: myPnArray[j]
            });
        }
    }

    // Below eliminates duplicate pairs of numbers.
    //     for (i = 0; i < 4; i++) {
    //         for (j = 0; j < 4; j++) {
    //             if (myArray[i].firstNumber === myPnArray[1] && myArray[j].secondNumber === myPnArray[0]) {
    //                 console.log("Hello");
    //             } else {
    //                 // push it in there.
    //             }
    //         }
    //     }

    console.log("My array of objects is: ", myArray);

    // My If statement below. Checking for existance of a specific pair of numbers.
    // if(myArray[3].firstNumber===myPnArray[1] && myArray[3].secondNumber===myPnArray[1]){
    //     console.log("This is what is found: ",myArray[3]);
    // }

    // Define object with the firest number, the second number, the sum of the two, and the difference of the two.

    // console.log("The objectArray is: ", objectArray);
    // console.log("The length of the objectArray is: ", objectArray.length);



    // 3. Check to see if the sum of the first and second pentagonal numbers are in the array of pentagonal numbers.
    // 4. Check to see if the difference between the first and second pentagonal numbers
}
myFunction(3);
// myFunction(2);
